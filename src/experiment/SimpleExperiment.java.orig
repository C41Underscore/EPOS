package experiment;

import agent.logging.GlobalCostLogger;
import agent.logging.TerminationLogger;
import agent.logging.LoggingProvider;
import agent.logging.AgentLoggingProvider;
import agent.logging.CostViewer;
import agent.dataset.Dataset;
import agent.*;
import agent.dataset.FileVectorDataset;
import agent.dataset.GaussianDataset;
import agent.logging.GraphLogger;
<<<<<<< HEAD
import agent.logging.GlobalResponseLogger;
=======
>>>>>>> 81d11369229c9ea691c31f40771e7e625e2dca4a
import agent.logging.LocalCostLogger;
import data.Plan;
import data.Vector;
import func.DifferentiableCostFunction;
import func.DiscomfortCostFunction;
import func.IndexCostFunction;
import func.PlanCostFunction;
import func.VarCostFunction;
import java.util.List;
import java.util.Random;
import java.util.function.Function;

/**
 *
 * @author Peter
 */
public class SimpleExperiment {

    public static void main(String[] args) {
<<<<<<< HEAD
        new SimpleExperiment().run();
    }
    
    public void run() {
        // constants
        int a = 127;
        int p = 16;
        int d = 40;
        int c = 2;
        int t = 20;
        int runs = 1;
        double lambda = 0;
        //DifferentiableCostFunction globalCostFunc = new VarCostFunction();
        DifferentiableCostFunction globalCostFunc;
        try {
            globalCostFunc = new SqrDistCostFunction(VectorIO.readVector(new File("input-data/energy/zero.target")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SimpleExperiment.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        PlanCostFunction localCostFunc = new DiscomfortCostFunction();

        // loggers
        LoggingProvider loggingProvider = new LoggingProvider<>();
        loggingProvider.add(new ProgressIndicator());
=======
        Random random = new Random(0);
       
        // dataset
        int numAgents = 127;
        Dataset<Vector> dataset = new GaussianDataset(16, 100, 0, 1, random);

        // optimization functions
        double lambda = 0.1;
        DifferentiableCostFunction globalCostFunc = new VarCostFunction();
        PlanCostFunction localCostFunc = new IndexCostFunction();

        // network
        int numChildren = 2;
       
        // logging
        LoggingProvider<IeposAgent<Vector>> loggingProvider = new LoggingProvider<>();
>>>>>>> 81d11369229c9ea691c31f40771e7e625e2dca4a
        loggingProvider.add(new GlobalCostLogger());
        loggingProvider.add(new LocalCostLogger());
        loggingProvider.add(new TerminationLogger());
        loggingProvider.add(new CostViewer());
        loggingProvider.add(new GraphLogger<>(GraphLogger.Type.Change));

<<<<<<< HEAD
        // dataset
        //Dataset<Vector> dataset = new GaussianDataset(p, d, 0, 1, new Random(0));
        // network
        TreeArchitecture architecture = new TreeArchitecture();
        architecture.balance = BalanceType.WEIGHT_BALANCED;
        architecture.maxChildren = c;
        architecture.priority = RankPriority.HIGH_RANK;
        architecture.rank = DescriptorType.RANK;
        architecture.rankGenerator = (idx, agent) -> (double) idx;
        architecture.type = TreeType.SORTED_HtL;
        
        for (int r = 0; r < runs; r++) {
            final int run = r;
            
            random.setSeed(r);
            Dataset dataset = new FileVectorDataset("input-data\\energy");
            
            SimpleExperiment.initEnvironment();
            init();
            
            PeerFactory peerFactory = new PeerFactory() {
                
                @Override
                public Peer createPeer(int peerIndex, Experiment e) {
                    List<Plan<Vector>> possiblePlans = dataset.getPlans(peerIndex);
                    AgentLoggingProvider agentLP = loggingProvider.getAgentLoggingProvider(peerIndex, run);
                    
                    IeposAgent newAgent = new IeposAgent(t, possiblePlans, globalCostFunc, localCostFunc, agentLP, random.nextLong());
                    newAgent.setLambda(lambda);
                    //newAgent.setPlanSelector(new IeposIndividualGradientPlanSelector());
                    //Agent newAgent = new CohdaAgent(t, possiblePlans, globalCostFunc, localCostFunc, agentLP, random.nextLong());
                    //Agent newAgent = new EposAgent(possiblePlans, globalCostFunc, localCostFunc, agentLP, random.nextLong());
                    //Agent newAgent = new BestStepAgent(t, possiblePlans, globalCostFunc, localCostFunc, agentLP, random.nextLong());
                    Peer newPeer = new Peer(peerIndex);
                    
                    architecture.addPeerlets(newPeer, newAgent, peerIndex, a);
                    
                    return newPeer;
                }
=======
        int numSimulations = 1;
        for(int sim = 0; sim < numSimulations; sim++) {
            final int simulationId = sim;
           
            // algorithm
            int numIterations = 20;
            PlanSelector<IeposAgent<Vector>, Vector> planSelector = new IeposPlanSelector();
            Function<Integer, Agent> createAgent = agentIdx -> {
                List<Plan<Vector>> possiblePlans = dataset.getPlans(agentIdx);
                AgentLoggingProvider agentLP = loggingProvider.getAgentLoggingProvider(agentIdx, simulationId);

                IeposAgent newAgent = new IeposAgent(
                        numIterations,
                        possiblePlans,
                        globalCostFunc,
                        localCostFunc,
                        agentLP,
                        random.nextLong());
                newAgent.setLambda(lambda);
                newAgent.setPlanSelector(planSelector);
                return newAgent;
>>>>>>> 81d11369229c9ea691c31f40771e7e625e2dca4a
            };

            // start experiment
            IeposExperiment.runSimulation(
                    numChildren,
                    numIterations,
                    numAgents,
                    createAgent);
        }

        loggingProvider.print();
    }
}
